import { JobEntry, Job } from './Job'
import { Collect } from '../Tasks/Collect'
import { Stash } from '../Tasks/Stash'
import { ResourceTarget } from '../Target/ResourceTarget'
import { StoreTarget } from '../Target/StoreTarget'
import { ContainerTarget } from '../Target/ContainerTarget'
import { Load } from '../Tasks/Load'
import { LoadTarget } from '../Target/LoadTarget'

type Tasks = Stash | Collect | Load
type CourierEntry = JobEntry & { flag: string }
export class Courier extends Job<CourierEntry, Tasks> {
  public type: 'courier' = 'courier'
  public body = [
    MOVE,
    MOVE,
    MOVE,
    MOVE,
    MOVE,
    CARRY,
    CARRY,
    CARRY,
    CARRY,
    CARRY,
    CARRY
  ]
  public flag: Flag

  public load(memory: CourierEntry): void {
    super.load(memory)
    this.flag = Game.flags[memory.flag]
  }
  public save(): CourierEntry {
    const memory = super.save()
    memory.flag = this.flag.name
    return memory
  }

  protected getNextTask(): Tasks | null {
    const container = this.flag.pos
      .lookFor(LOOK_STRUCTURES)
      .filter(structure => structure.structureType === STRUCTURE_CONTAINER)[0]
    const resource = this.flag.pos
      .lookFor(LOOK_RESOURCES)
      .filter(r => r.amount >= 50)[0]

    const stashTarget = StoreTarget.fromJob(StoreTarget, this)
    if (stashTarget.exists && this.step === 'stashing')
      return this.getStashTask(stashTarget)

    const resourceTarget = ResourceTarget.fromTarget(
      ResourceTarget,
      this.mission.village,
      resource
    ) as ResourceTarget
    if (resourceTarget.exists) return this.getCollectTask(resourceTarget)

    const container = LoadTarget.fromTarget(
      LoadTarget,
      this.mission.village,
      container
    )
    if (containerTarget.exists) return this.getLoadTask(containerTarget)

    if (this.getUsedCapacity() > 0 && stashTarget.exists)
      return this.getStashTask(stashTarget)

    return null
  }
  protected onTaskFinish(): void {
    if (this.getFreeCapacity(RESOURCE_ENERGY) === 0) this.step = 'stashing'
    else if (this.getUsedCapacity(RESOURCE_ENERGY) === 0)
      this.step = 'gathering'
  }
}
